import type { Bot } from "grammy";
import type { BotContext } from "../types.js";
import prisma from "../prisma.js";
import { getGlobalProgressWordle } from "../helpers/index.js";

export const wordCommand = (bot: Bot<BotContext>) => {
  bot.command("word", async (ctx: BotContext) => {
    let word = ctx.match?.toString().trim().toLowerCase() || "";

    if (!word) {
      await ctx.conversation.enter("write_word");
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è conversation
    }

    await processWordLogic(ctx, word);
  });
};

export const processWordLogic = async (ctx: BotContext, word: string) => {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
  if (!ctx.user && ctx.from) {
    ctx.user = await prisma.user.findUnique({
      where: { telegramId: ctx.from.id.toString() },
    });
  }

  const currentWordle = await prisma.wordle.findFirst({
    orderBy: { createdAt: "desc" },
    include: { WordleAttempt: true },
  });

  const isLetter = word.length === 1 && /^[–∞-—è—ë]$/i.test(word);
  const isFullWord = word.length === 5 && /^[–∞-—è—ë]+$/i.test(word);

  if (!currentWordle) {
    return ctx.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤");
  }

  if (!ctx.user) {
    return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ");
  }

  const attemptsCount = await prisma.wordleAttempt.count({
    where: { userId: ctx.user.id, wordleId: currentWordle.id },
  });

  if (attemptsCount >= 5) {
    const progress = (await getGlobalProgressWordle(currentWordle)).progress;
    return ctx.reply(
      `–£ –≤–∞—Å —É–∂–µ 5 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —ç—Ç–æ—Ç Wordle!\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}`
    );
  }

  if (!isLetter && !isFullWord) {
    return ctx.reply(
      `–ù–∞–ø–∏—à–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${
        5 - attemptsCount
      }`
    );
  }

  const remainingAttempts = 5 - attemptsCount - 1;

  const wordleAttemptCreate = async () => {
    ctx.user
      ? await prisma.wordleAttempt.create({
          data: {
            userId: ctx.user.id,
            wordleId: currentWordle.id,
            word,
            attempt: attemptsCount + 1,
          },
        })
      : ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ");
  };

  // === –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ ===
  if (isFullWord) {
    // –ó–∞–Ω–æ—Å–∏–º –ø–æ–ø—ã—Ç–∫—É –≤ –±–∞–∑—É
    wordleAttemptCreate();

    if (word === currentWordle.answer.toLowerCase()) {
      await prisma.user.update({
        where: { id: ctx.user.id },
        data: { wordle_score: ctx.user.wordle_score + 3 },
      });
      return ctx.reply(
        `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: ${currentWordle.answer}\n+3 –±–∞–ª–ª–∞ - /score`
      );
    }

    return ctx.reply(
      `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–ª–æ–≤–æ "${word}". –û–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ.\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remainingAttempts}`
    );
  }

  // === –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –±—É–∫–≤—É ===
  if (isLetter) {
    const answerLower = currentWordle.answer.toLowerCase();

    const allAttempts = await prisma.wordleAttempt.findMany({
      where: { wordleId: currentWordle.id },
      select: { word: true },
    });

    const guessedLetters = new Set(
      allAttempts
        .map((a) => a.word)
        .filter((w) => w.length === 1)
        .map((w) => w.toLowerCase())
    );

    console.log(guessedLetters);

    const isCorrectLetter = answerLower.includes(word);
    const isNewCorrectLetter = isCorrectLetter && !guessedLetters.has(word);
    const isNewLetter = !isCorrectLetter && !guessedLetters.has(word);

    let newGuessedLetters = Array.from(guessedLetters);

    if (isNewLetter || isNewCorrectLetter) {
      newGuessedLetters = [...guessedLetters, word];
    }

    if (isNewCorrectLetter) {
      await prisma.user.update({
        where: { id: ctx.user.id },
        data: { wordle_score: ctx.user.wordle_score + 1 },
      });
    }
    // –ó–∞–Ω–æ—Å–∏–º –ø–æ–ø—ã—Ç–∫—É –≤ –±–∞–∑—É
    wordleAttemptCreate();

    // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedWordle = await prisma.wordle.findUnique({
      where: { id: currentWordle.id },
      include: { WordleAttempt: true },
    });

    if (!updatedWordle) {
      return ctx.reply("–û—à–∏–±–∫–∞: Wordle –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const progress = (await getGlobalProgressWordle(updatedWordle)).progress;

    const isWinner = progress === currentWordle.answer;

    if (isWinner) {
      return ctx.reply(
        `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–ª–æ–≤–æ "${currentWordle.answer}" –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–≥–∞–¥–∞–Ω–æ! üéâ`
      );
    }

    if (isNewCorrectLetter) {
      return ctx.reply(
        `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É "${word.toUpperCase()}"\n+1 –±–∞–ª–ª - /score\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remainingAttempts}\n–°–ø–∏—Å–æ–∫ –ø—Ä–æ—à–ª—ã—Ö –±—É–∫–≤: ${newGuessedLetters}`
      );
    }

    if (!isCorrectLetter) {
      return ctx.reply(
        `–ë—É–∫–≤—ã "${word.toUpperCase()}" –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ.\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remainingAttempts}\n–°–ø–∏—Å–æ–∫ –ø—Ä–æ—à–ª—ã—Ö –±—É–∫–≤: ${newGuessedLetters}`
      );
    }

    return ctx.reply(
      `–ë—É–∫–≤–∞ "${word.toUpperCase()}" —É–∂–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞.\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remainingAttempts}\n–°–ø–∏—Å–æ–∫ –ø—Ä–æ—à–ª—ã—Ö –±—É–∫–≤: ${newGuessedLetters}`
    );
  }
};
