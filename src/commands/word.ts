import type { Bot } from "grammy";
import type { BotContext } from "../types.js";
import { replyMsg } from "../helpers/reply.js";
import prisma from "../prisma.js";
import { getGlobalProgressWordle } from "../helpers/index.js";

export const wordCommand = (bot: Bot<BotContext>) => {
  bot.command("word", async (ctx: BotContext) => {
    const word = ctx.match?.toString().trim().toLowerCase() || "";
    const msgId = ctx.update?.message?.message_id;
    const currentWordle = await prisma.wordle.findFirst({
      orderBy: { createdAt: "desc" },
      include: { WordleAttempt: true },
    });
    const isLetter = word.length === 1 && /^[–∞-—è—ë]$/i.test(word);
    const isFullWord = word.length === 5 && /^[–∞-—è—ë]+$/i.test(word);

    if (!currentWordle) {
      return replyMsg(ctx, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤", msgId);
    }

    if (!ctx.user) {
      return replyMsg(ctx, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", msgId);
    }

    const attemptsCount = await prisma.wordleAttempt.count({
      where: { userId: ctx.user.id, wordleId: currentWordle.id },
    });

    if (attemptsCount >= 5) {
      const progress = (await getGlobalProgressWordle(currentWordle)).progress;
      return replyMsg(
        ctx,
        `–£ –≤–∞—Å —É–∂–µ 5 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —ç—Ç–æ—Ç Wordle!\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}`,
        msgId
      );
    }

    if (!isLetter && !isFullWord) {
      return replyMsg(
        ctx,
        `–ù–∞–ø–∏—à–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${
          5 - attemptsCount
        }`,
        msgId
      );
    }

    const remainingAttempts = 5 - attemptsCount - 1;

    // === –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ ===
    if (isFullWord) {
      await prisma.wordleAttempt.create({
        data: {
          userId: ctx.user.id,
          wordleId: currentWordle.id,
          word,
          attempt: attemptsCount + 1,
        },
      });

      if (word === currentWordle.answer.toLowerCase()) {
        await prisma.user.update({
          where: { id: ctx.user.id },
          data: { wordle_score: ctx.user.wordle_score + 3 },
        });
        return replyMsg(
          ctx,
          `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: ${currentWordle.answer}\n+3 –±–∞–ª–ª–∞ - /score`,
          msgId
        );
      }

      return replyMsg(
        ctx,
        `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–ª–æ–≤–æ "${word}". –û–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ.\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remainingAttempts}`,
        msgId
      );
    }

    // === –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –±—É–∫–≤—É ===
    if (isLetter) {
      const answerLower = currentWordle.answer.toLowerCase();

      const allAttempts = await prisma.wordleAttempt.findMany({
        where: { wordleId: currentWordle.id },
        select: { word: true },
      });

      const guessedLetters = new Set(
        allAttempts
          .map((a) => a.word)
          .filter((w) => w.length === 1)
          .map((w) => w.toLowerCase())
      );

      const isCorrectLetter = answerLower.includes(word);
      const isNewCorrectLetter = isCorrectLetter && !guessedLetters.has(word);

      if (isNewCorrectLetter) {
        await prisma.user.update({
          where: { id: ctx.user.id },
          data: { wordle_score: ctx.user.wordle_score + 1 },
        });
      }

      await prisma.wordleAttempt.create({
        data: {
          userId: ctx.user.id,
          wordleId: currentWordle.id,
          word,
          attempt: attemptsCount + 1,
        },
      });

      const progress = (await getGlobalProgressWordle(currentWordle)).progress;

      const isWinner = progress === currentWordle.answer;

      if (isWinner) {
        return replyMsg(
          ctx,
          `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–ª–æ–≤–æ "${currentWordle.answer}" –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–≥–∞–¥–∞–Ω–æ! üéâ`,
          msgId
        );
      }

      if (isNewCorrectLetter) {
        return replyMsg(
          ctx,
          `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É "${word.toUpperCase()}"\n+1 –±–∞–ª–ª - /score\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remainingAttempts}`,
          msgId
        );
      }

      if (!isCorrectLetter) {
        return replyMsg(
          ctx,
          `–ë—É–∫–≤—ã "${word.toUpperCase()}" –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ.\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remainingAttempts}`,
          msgId
        );
      }

      return replyMsg(
        ctx,
        `–ë—É–∫–≤–∞ "${word.toUpperCase()}" —É–∂–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞.\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remainingAttempts}`,
        msgId
      );
    }
  });
};
