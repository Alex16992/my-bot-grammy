import { Menu } from "@grammyjs/menu";

// –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é.
export const cryptoMenu = new Menu("my-menu-identifier")
  .text("Bitcoin", async (ctx) => {
    try {
      // –ó–∞–ø—Ä–æ—Å –∫ CoinGecko API
      const res = await fetch(
        "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
      );
      const data = await res.json();

      const btcPrice = data.bitcoin.usd;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(`üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞:\nBitcoin: $${btcPrice}`);
    } catch (err) {
      console.error(err);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.");
    }
  })
  .row()
  .text("Ethereum", async (ctx) => {
    try {
      // –ó–∞–ø—Ä–æ—Å –∫ CoinGecko API
      const res = await fetch(
        "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd"
      );
      const data = await res.json();

      const ethPrice = data.ethereum.usd;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(`üí∞ –ö—É—Ä—Å —ç—Ñ–∏—Ä–∏—É–º–∞:\nEthereum: $${ethPrice}`);
    } catch (err) {
      console.error(err);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.");
    }
  })
  .row()
  .text("Litecoin", async (ctx) => {
    try {
      // –ó–∞–ø—Ä–æ—Å –∫ CoinGecko API
      const res = await fetch(
        "https://api.coingecko.com/api/v3/simple/price?ids=litecoin&vs_currencies=usd"
      );
      const data = await res.json();

      const ltcPrice = data.litecoin.usd;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(`üí∞ –ö—É—Ä—Å –ª–∞–∏ÃÜ—Ç–∫–æ–∏–Ω–∞:\nLitecoin: $${ltcPrice}`);
    } catch (err) {
      console.error(err);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.");
    }
  });
